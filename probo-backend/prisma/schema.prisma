// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String?
  address     String        @unique
  type        UserType
  balance     Balance?
  submissions Submissions[]
  payouts     Payout[]
}

model Admin {
  id       Int      @id @default(autoincrement())
  name     String?
  type     UserType
  polls    Polls[]
  email    String   @unique
  password String
}

model Balance {
  id             Int   @id @default(autoincrement())
  amount         Float @default(0.0)
  user_id        Int   @unique
  user           User  @relation(fields: [user_id], references: [id])
  locked_amount  Float @default(0.0)
  pending_amount Float @default(0.0)
}

model Polls {
  id                Int           @id @default(autoincrement())
  title             String
  admin_id          Int
  image             String?
  poll_options      PollsOption[]
  submissions       Submissions[]
  expiry            DateTime
  balanceCalculated Boolean       @default(false)
  outcome           Json
  total_bets        Float         @default(0)
  admin             Admin         @relation(fields: [admin_id], references: [id])
}

model Submissions {
  id        Int         @id @default(autoincrement())
  user_id   Int
  user      User        @relation(fields: [user_id], references: [id])
  option_id Int
  option    PollsOption @relation(fields: [option_id], references: [id])
  poll_id   Int
  poll      Polls       @relation(fields: [poll_id], references: [id])
  amount    Float
  createdAt DateTime    @default(now())
  isWinner  Boolean     @default(false)
  //add uniques constraints on user_id and poll_id
}

model PollsOption {
  id            Int           @id @default(autoincrement())
  title         String
  poll_id       Int
  poll          Polls         @relation(fields: [poll_id], references: [id])
  submissions   Submissions[]
  dynamic_price Float         @default(0.5) // Initial price or dynamically adjusted price
  total_bets    Float         @default(0) // Total amount of bets on this option
  initial_price Float         @default(0.5) // Initial price for the option
}

model Payout {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  amount    Int
  status    PayoutStatus
  signature String
}

enum UserType {
  USER
  ADMIN
}

enum PayoutStatus {
  PENDING
  COMPLETED
  FAILED
}
